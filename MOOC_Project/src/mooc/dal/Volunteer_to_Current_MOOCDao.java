package mooc.dal;

import mooc.model.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;


public class Volunteer_to_Current_MOOCDao {
	protected ConnectionManager connectionManager;
	
	private static Volunteer_to_Current_MOOCDao instance = null;
	protected Volunteer_to_Current_MOOCDao() {
		connectionManager = new ConnectionManager();
	}
	public static Volunteer_to_Current_MOOCDao getInstance() {
		if(instance == null) {
			instance = new Volunteer_to_Current_MOOCDao();
		}
		return instance;
	}
	
	protected int id;
	protected int volunteerId;
	protected int schoolId;

	// public create(Volunteer_to_School volunteer_to_school)
	// adds a new Volunteer_to_School to the database
	public Volunteer_to_Current_MOOC create(Volunteer_to_Current_MOOC volunteer_to_current_mooc) throws SQLException {
		String insertVolunteer_to_Current_MOOC = "INSERT INTO Volunteer_To_Current_MOOC(VolunteerId,MOOCId) VALUES(?,?);";
		Connection connection = null;
		PreparedStatement insertStmt = null;
		// below needed for autogenerated keys
		ResultSet resultKey = null;
		// end autogenerated key code 1of4
		try {
			connection = connectionManager.getConnection();
			insertStmt = connection.prepareStatement(insertVolunteer_to_Current_MOOC,
					// below needed for autogenerated keys
					Statement.RETURN_GENERATED_KEYS);
                    // end autogenerated key code 2of4
			insertStmt.setInt(1, volunteer_to_current_mooc.getVolunteerID());
			insertStmt.setInt(2, volunteer_to_current_mooc.getMOOCID());

			insertStmt.executeUpdate();
			
			// bellow autogenerates key 
			resultKey = insertStmt.getGeneratedKeys();
			int volunteermoocID = -1;
			if(resultKey.next()) {
				volunteermoocID = resultKey.getInt(1);
			} else {
				throw new SQLException("Unable to retrieve auto-generated key.");
			}
			volunteer_to_current_mooc.setVolunteerMOOCID(volunteermoocID);
			// end autogenerated key code 3of4
			return volunteer_to_current_mooc;
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(connection != null) {
				connection.close();
			}
			if(insertStmt != null) {
				insertStmt.close();
			}
			// bellow used for autogenerated key
			if(resultKey != null) {
				resultKey.close();
			}
			// end autogenerated key code 4of4
		}
	}
	
	public Volunteer_to_Current_MOOC updateVolunteer(Volunteer_to_Current_MOOC vmooc,Volunteer volunteer)throws SQLException{
		String updateStudents = "UPDATE Volunteer_to_Current_MOOC SET VolunteerID=? WHERE VolunteerMOOC_ID=?";
		Connection connection = null;
		PreparedStatement updateStmt = null;
		try {
			connection = connectionManager.getConnection();
			updateStmt = connection.prepareStatement(updateStudents);
			updateStmt.setInt(1, volunteer.getID());
			updateStmt.setInt(2, vmooc.getVolunteerMOOCID());
			updateStmt.executeUpdate();
			vmooc.setVolunteerID(volunteer.getID());
			return vmooc;
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(connection != null) {
				connection.close();
			}
			if(updateStmt != null) {
				updateStmt.close();
			}
		}
	}

	// public Volunteer_to_Current_MOOC delete(Volunteer_to_Current_MOOC volunteer_to_current_mooc) 
	// Given a Volunteer_to_Current_MOOC, removes it from the database
	public Volunteer_to_Current_MOOC delete(Volunteer_to_Current_MOOC volunteer_to_current_mooc) throws SQLException {
		String deleteVolunteer_to_Current_MOOC = "DELETE FROM Volunteer_To_Current_MOOC WHERE VolunteerMOOC_ID=?;";
		Connection connection = null;
		PreparedStatement deleteStmt = null;
		try {
			connection = connectionManager.getConnection();
			deleteStmt = connection.prepareStatement(deleteVolunteer_to_Current_MOOC);
			deleteStmt.setInt(1, volunteer_to_current_mooc.getVolunteerMOOCID());
			deleteStmt.executeUpdate();

			// Return null so the caller can no longer operate on the Volunteer instance
			return null;
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(connection != null) {
				connection.close();
			}
			if(deleteStmt != null) {
				deleteStmt.close();
			}
		}
	}
	
	// public Volunteer_to_Current_MOOC getVolunteer_to_Current_MOOCFromID(int volunteerMOOCID)
	// given a vounteer_to_current_MOOC VolunteerMOOCID, retrieves the matching Volunteer_to_Current_MOOC
	public Volunteer_to_Current_MOOC getVolunteer_to_Current_MOOCFromID(int volunteerMOOCID) throws SQLException {
		String selectVolunteer_to_Current_MOOC = "SELECT * FROM Volunteer_To_Current_MOOC WHERE VolunteerMOOC_ID=?;";
		Connection connection = null;
		PreparedStatement selectStmt = null;
		ResultSet results = null;
		try {
			connection = connectionManager.getConnection();
			selectStmt = connection.prepareStatement(selectVolunteer_to_Current_MOOC);
			selectStmt.setInt(1, volunteerMOOCID);
			// Note that we call executeQuery(). This is used for a SELECT statement
			// because it returns a result set. For more information, see:
			// http://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html
			// http://docs.oracle.com/javase/7/docs/api/java/sql/ResultSet.html
			results = selectStmt.executeQuery();
			// You can iterate the result set (although the example below only retrieves 
			// the first record). The cursor is initially positioned before the row.
			// Furthermore, you can retrieve fields by name and by type.
			if(results.next()) {
				Integer resultID = results.getInt("VolunteerMOOC_ID");
				Integer volunteerId = results.getInt("VolunteerId");
				Integer moocId = results.getInt("MOOCID");
				
				Volunteer_to_Current_MOOC volunteer_to_current_mooc = new Volunteer_to_Current_MOOC(resultID, volunteerId, moocId);
				return volunteer_to_current_mooc;
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(connection != null) {
				connection.close();
			}
			if(selectStmt != null) {
				selectStmt.close();
			}
			if(results != null) {
				results.close();
			}
		}
		return null;
	}
	
	}